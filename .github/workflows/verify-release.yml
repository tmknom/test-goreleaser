name: Verify Release
on:
  workflow_run:
    workflows: [Release]
    types:
      - completed
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: false
        description: The version of released artifacts.
      commit:
        type: string
        required: false
        description: The commit of released artifacts.

# concurrency:
#   group: ${{ github.workflow }}-${{ github.event.release.outputs.tag_name }}
#   cancel-in-progress: true

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  verify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      packages: read
    steps:
      - name: Log context
        env:
          CONTEXT: ${{ toJSON(github) }}
        run: |
          printenv CONTEXT

      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Set environment variables
        id: repository
        run: |
          set -x
          version="$(curl -sSL "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r '.tag_name')"
          commit="$(git rev-list -n 1 "${version}")"
          {
            echo "NAME=${GITHUB_REPOSITORY#"${GITHUB_REPOSITORY_OWNER}"/}"
            echo "VERSION=${version#v}"
            echo "COMMIT=${commit}"
            echo "OIDC_ISSUER=https://token.actions.githubusercontent.com"
          } >> "${GITHUB_ENV}"

          escaped_server='^https://github\.com/'
          # escaped_workflow='/release-workflows/\.github/workflows/go\.yml@.+$'
          escaped_workflow='/test-goreleaser/\.github/workflows/reusable-release\.yml@.+$'
          echo "CERTIFICATE_IDENTITY=${escaped_server}${GITHUB_REPOSITORY_OWNER}${escaped_workflow}" >> "${GITHUB_ENV}"

      - name: Install Cosign
        uses: sigstore/cosign-installer@dc72c7d5c4d10cd6bcb8cf6e3fd625a9e5e537da # v3.7.0

      - name: Install slsa-verifier
        uses: slsa-framework/slsa-verifier/actions/installer@3714a2a4684014deb874a0e737dffa0ee02dd647 # v2.6.0

      - name: Download artifacts
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          gh release download "v${VERSION}"
          docker pull "ghcr.io/${GITHUB_REPOSITORY}:v${VERSION}"

      - name: Verify checksum
        run: |
          set -x
          target="${NAME}_${VERSION}_checksums.txt"
          cosign verify-blob \
            --signature "${target}.sig" \
            --certificate "${target}.pem" \
            --certificate-oidc-issuer "${OIDC_ISSUER}" \
            --certificate-identity-regexp "${CERTIFICATE_IDENTITY}" \
            --certificate-github-workflow-repository "${GITHUB_REPOSITORY}" \
            --certificate-github-workflow-sha "${COMMIT}" \
            "${target}"
          sha256sum --ignore-missing -c "${target}"

      - name: Verify binaries
        run: |
          set -x
          target="${NAME}_${VERSION}_linux_amd64"
          cosign verify-blob \
            --signature "${target}.sig" \
            --certificate "${target}.pem" \
            --certificate-oidc-issuer "${OIDC_ISSUER}" \
            --certificate-identity-regexp "${CERTIFICATE_IDENTITY}" \
            --certificate-github-workflow-repository "${GITHUB_REPOSITORY}" \
            --certificate-github-workflow-sha "${COMMIT}" \
            "${target}"

      - name: Verify attestations for binary
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          target="${NAME}_${VERSION}_linux_amd64"
          gh attestation verify "${target}" \
            --deny-self-hosted-runners \
            --repo "${GITHUB_REPOSITORY}" \
            --cert-oidc-issuer "${OIDC_ISSUER}" \
            --cert-identity-regex "${CERTIFICATE_IDENTITY}"

      - name: Verify SLSA provenances for binary
        run: |
          set -x
          target="${NAME}_${VERSION}_linux_amd64"
          slsa-verifier verify-artifact \
            --source-uri "github.com/${GITHUB_REPOSITORY}" \
            --provenance-path "${NAME}_${VERSION}.intoto.jsonl" \
            "${target}"

      - name: Verify container images
        run: |
          set -x
          target="ghcr.io/${GITHUB_REPOSITORY}:v${VERSION}"
          cosign verify \
            --certificate-oidc-issuer "${OIDC_ISSUER}" \
            --certificate-identity-regexp "${CERTIFICATE_IDENTITY}" \
            --certificate-github-workflow-repository "${GITHUB_REPOSITORY}" \
            --certificate-github-workflow-sha "${COMMIT}" \
            "${target}"

      - name: Verify attestations for container image
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          target="ghcr.io/${GITHUB_REPOSITORY}:v${VERSION}"
          gh attestation verify "oci://${target}" \
            --deny-self-hosted-runners \
            --repo "${GITHUB_REPOSITORY}" \
            --cert-oidc-issuer "${OIDC_ISSUER}" \
            --cert-identity-regex "${CERTIFICATE_IDENTITY}"

      - name: Verify SLSA provenances for container image
        run: |
          set -x
          target="ghcr.io/${GITHUB_REPOSITORY}:v${VERSION}"
          slsa-verifier verify-image \
            --source-uri "github.com/${GITHUB_REPOSITORY}" \
            "$(docker inspect "${target}" | jq -r '.[0].RepoDigests[0]')"
