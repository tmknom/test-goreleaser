name: Release Go
on:
  workflow_call:
    inputs:
      bump-level:
        type: string
        required: true
        description: Determines which part of the version to increment [patch/minor/major]
      go-version-file:
        type: string
        default: go.mod
        required: false
        description: Path to the version file for Go, such as .go-version, go.mod or go.work.
      homebrew-tap-repository:
        type: string
        default: homebrew-tap
        required: false
        description: The repository for Homebrew formulae used to install tools on macOS.

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  prepare:
    if: ${{ github.repository_owner == github.actor }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      packages: read
      id-token: write
    outputs:
      token: ${{ steps.encrypt.outputs.result }}
    steps:
      - name: Private Generate GitHub Token
        id: private
        uses: tmknom/private-generate-github-token-action@0270221045a1b793cfc68f81fab03f56c76b8ad9 # v0.3.7
        with:
          repositories: ${{ inputs.homebrew-tap-repository }}

      - name: Encrypt token
        id: encrypt
        uses: tmknom/symmetric-encrypt-decrypt-action@f82452a36a04ec4b4215dd92d7958cdae5f9a620 # v0.1.3
        with:
          data: ${{ steps.private.outputs.token }}
          operation: encrypt

  release:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [prepare]
    permissions:
      contents: write
      packages: write
      id-token: write
      attestations: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1

      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          go-version-file: ${{ inputs.go-version-file }}

      - name: Bump Version
        id: bump
        uses: tmknom/bump-version-action@87bed7f224292cab5b46a4cae9897bbf64153f00 # v0.2.1
        with:
          bump-level: ${{ inputs.bump-level }}

      - name: Push Version Tag
        uses: tmknom/push-version-tag-action@a9d1b46f9c29d3db510771452257b228bfd8a33f # v0.1.1
        with:
          version: ${{ steps.bump.outputs.version }}

      - name: Install Cosign
        uses: sigstore/cosign-installer@faadad0cce49287aee09b3a48701e75088a2c6ad # v4.0.0

      - name: Install Syft
        uses: anchore/sbom-action/download-syft@8e94d75ddd33f69f691467e42275782e4bfefe84 # v0.20.9

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Retrieve OIDC Token
        id: oidc
        uses: tmknom/retrieve-oidc-token-action@4c373152cedf7f42b1e496e245236449d8d57121 # v0.2.1

      - name: Decrypt token
        id: decrypt
        uses: tmknom/symmetric-encrypt-decrypt-action@f82452a36a04ec4b4215dd92d7958cdae5f9a620 # v0.1.3
        with:
          data: ${{ needs.prepare.outputs.token }}
          operation: decrypt

      - name: Cross GoReleaser
        id: goreleaser
        uses: tmknom/cross-goreleaser-action@82a4d7bb957327183372a84b32537eb6b0a680f9 # v0.2.2
        with:
          configuration-url: https://raw.githubusercontent.com/tmknom/configurations/06d49c39013617310276b557ca26d6e6888557b9/goreleaser/verifiable.yml # v0.5.0
          homebrew-tap-repository: ${{ inputs.homebrew-tap-repository }}
          homebrew-tap-github-token: ${{ steps.decrypt.outputs.result }}
          # configuration-path: .goreleaser.yml

      - name: Revoke GitHub Token
        if: ${{ always() }}
        uses: tmknom/revoke-github-token-action@9ed4395d40ab1dd9dcd63e33686dc0f8b38ca8b1 # v0.1.2
        with:
          token: ${{ steps.decrypt.outputs.result }}

      - name: Attest binaries
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-path: dist/

      - name: Generate metadata
        id: metadata
        env:
          ARTIFACTS: ${{ steps.goreleaser.outputs.artifacts }}
        run: |
          set -x
          manifest_digest="$(jq -r '. | map(select(.type=="Docker Manifest"))[0] | .extra.Digest' <<<"${ARTIFACTS}")"
          echo "manifest-digest=${manifest_digest}" >> "${GITHUB_OUTPUT}"

      - name: Attest container images
        uses: actions/attest-build-provenance@e8998f949152b193b063cb0ec769d69d929409be # v2.4.0
        with:
          subject-name: ghcr.io/${{ github.repository }}
          subject-digest: ${{ steps.metadata.outputs.manifest-digest }}
          push-to-registry: true

      - name: Upload Artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: dist
          path: dist/
          retention-days: 1

      - name: Generate footer of release notes
        id: footer
        env:
          VERSION_TAG: ${{ steps.bump.outputs.version }}
          IMAGE_DIGEST: ${{ steps.metadata.outputs.manifest-digest }}
          CERTIFICATE_IDENTITY: ${{ github.server_url }}/${{ steps.oidc.outputs.job_workflow_ref }}
          CERTIFICATE_OIDC_ISSUER: https://token.actions.githubusercontent.com
        run: |
          set -x
          name="${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}"
          version="${VERSION_TAG#v}"
          footer_file="${RUNNER_TEMP}/footer_release_notes.md"
          echo "file=${footer_file}" >> "${GITHUB_OUTPUT}"

          cat <<EOF >>"${footer_file}"
          ---

          ## Installation

          Official binaries can be downloaded from ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases .
          We support popular operating systems such as Linux, Windows, and macOS, as well as CPU architectures like amd64 and arm64.

          ### Manual Installation

          Download the binary for your operating system and architecture, make it executable, and move it to a directory in your `PATH`.
          For example, on AMD64 Linux, run the following commands:

          \`\`\`shell
          curl -sSL -o ${name} "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${version}/${name}_${version}_linux_amd64"
          chmod +x ${name}
          sudo mv ${name} /usr/local/bin/${name}
          \`\`\`

          ### Homebrew Installation

          \`\`\`shell
          brew install tmknom/tap/${name}
          \`\`\`

          ### DEB Installation

          Download the `.deb` package for your architecture (e.g., `*_linux_amd64.deb` or `*_linux_arm64.deb`), then install it using the `dpkg` command:

          \`\`\`shell
          curl -sSL -o ${name}.deb "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${version}/${name}_${version}_linux_amd64.deb"
          dpkg -i ${name}.deb
          \`\`\`

          ### RPM Installation

          Download the `.rpm` package for your architecture (e.g., `*_linux_amd64.rpm` or `*_linux_arm64.rpm`), then install it using the `rpm` command:

          \`\`\`shell
          curl -sSL -o ${name}.rpm "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${version}/${name}_${version}_linux_amd64.rpm"
          rpm -ivh ${name}.rpm
          \`\`\`

          ### APK Installation

          Download the `.apk` package for your architecture (e.g., `*_linux_amd64.apk` or `*_linux_arm64.apk`), then install it using the `apk` command:

          \`\`\`shell
          curl -sSL -o ${name}.apk "${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/releases/download/${version}/${name}_${version}_linux_amd64.apk"
          apk add --allow-untrusted ${name}.apk
          \`\`\`

          ## Verification

          All artifacts are checksummed, and signed by Cosign using identity-based ("keyless") signing and transparency.

          ### Checksum verification

          1. Install [GitHub CLI](https://cli.github.com/) and [Cosign](https://github.com/sigstore/cosign) if not already available.
          2. Download all artifacts using GitHub CLI:
              \`\`\`shell
              gh release download ${VERSION_TAG}
              \`\`\`
          3. Verify the signature using:
              \`\`\`shell
              cosign verify-blob \\
                --signature "${name}_${version}_checksums.txt.sig" \\
                --certificate "${name}_${version}_checksums.txt.pem" \\
                --certificate-oidc-issuer "${CERTIFICATE_OIDC_ISSUER}" \\
                --certificate-identity "${CERTIFICATE_IDENTITY}" \\
                --certificate-github-workflow-repository "${GITHUB_REPOSITORY}" \\
                --certificate-github-workflow-sha "${GITHUB_SHA}" \\
                "${name}_${version}_checksums.txt"
              \`\`\`
          4. Verify the checksum of the downloaded files using:
              \`\`\`shell
              sha256sum --ignore-missing -c "${name}_${version}_checksums.txt"
              \`\`\`
              Ensure that the output indicates a valid match.

          ### Cosign verification

          You can verify all artifacts, such as executable binaries, Linux packages, checksum files, and SBOMs.
          For example, the `linux/amd64` binary:

          1. Install [Cosign](https://github.com/sigstore/cosign) if not already available.
          2. Verify the signature using:
              \`\`\`shell
              cosign verify-blob \\
                --signature "${name}_${version}_linux_amd64.sig" \\
                --certificate "${name}_${version}_linux_amd64.pem" \\
                --certificate-oidc-issuer "${CERTIFICATE_OIDC_ISSUER}" \\
                --certificate-identity "${CERTIFICATE_IDENTITY}" \\
                --certificate-github-workflow-repository "${GITHUB_REPOSITORY}" \\
                --certificate-github-workflow-sha "${GITHUB_SHA}" \\
                "${name}_${version}_linux_amd64"
              \`\`\`

          ### GitHub Artifact Attestations verification

          You can verify all artifacts, such as executable binaries, Linux packages, checksum files, and SBOMs.
          For example, the `linux/amd64` binary:

          1. Install [GitHub CLI](https://cli.github.com/) if not already available.
          2. Verify the attestation:
              \`\`\`shell
              gh attestation verify "${name}_${version}_linux_amd64" \\
                --deny-self-hosted-runners \\
                --repo "${GITHUB_REPOSITORY}" \\
                --cert-oidc-issuer "${CERTIFICATE_OIDC_ISSUER}" \\
                --cert-identity "${CERTIFICATE_IDENTITY}"
              \`\`\`

          ## Container Images

          - https://github.com/${GITHUB_REPOSITORY}/pkgs/container/${name}

          ### Pull image tag

          \`\`\`shell
          docker pull ghcr.io/${GITHUB_REPOSITORY}:${VERSION_TAG}
          \`\`\`

          ### Pull image digest

          \`\`\`shell
          docker pull ghcr.io/${GITHUB_REPOSITORY}@${IMAGE_DIGEST}
          \`\`\`

          ### Cosign verification

          You can verify container images using Cosign.

          1. Install [Cosign](https://github.com/sigstore/cosign) if not already available.
          2. Verify the signature using:
              \`\`\`shell
              cosign verify \\
                --certificate-oidc-issuer "${CERTIFICATE_OIDC_ISSUER}" \\
                --certificate-identity "${CERTIFICATE_IDENTITY}" \\
                --certificate-github-workflow-repository "${GITHUB_REPOSITORY}" \\
                --certificate-github-workflow-sha "${GITHUB_SHA}" \\
                ghcr.io/${GITHUB_REPOSITORY}@${IMAGE_DIGEST}
              \`\`\`

          ### GitHub Artifact Attestations verification

          You can verify container images using GitHub Artifact Attestations.

          1. Install [GitHub CLI](https://cli.github.com/) if not already available.
          2. Verify the attestation:
              \`\`\`shell
              gh attestation verify oci://ghcr.io/${GITHUB_REPOSITORY}@${IMAGE_DIGEST} \\
                --deny-self-hosted-runners \\
                --repo "${GITHUB_REPOSITORY}" \\
                --cert-oidc-issuer "${CERTIFICATE_OIDC_ISSUER}" \\
                --cert-identity "${CERTIFICATE_IDENTITY}"
              \`\`\`
          EOF

          cat "${footer_file}" >> "${GITHUB_STEP_SUMMARY}"

      - name: Publish release
        env:
          FOOTER_FILE: ${{ steps.footer.outputs.file }}
          VERSION_TAG: ${{ steps.bump.outputs.version }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -x
          notes_file="${RUNNER_TEMP}/release_notes.md"
          gh release view "${VERSION_TAG}" --json "body" --jq ".body" >> "${notes_file}"
          cat "${FOOTER_FILE}" >> "${notes_file}"
          gh release edit "${VERSION_TAG}" --draft=false --notes-file "${notes_file}"
