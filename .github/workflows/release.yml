name: Release
on:
  workflow_dispatch:
    inputs:
      level:
        type: string
        required: true
        description: Bump up to [patch / minor / major]

permissions: {}

defaults:
  run:
    shell: bash

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: tmknom/checkout-action@v1
        with:
          fetch-depth: 0

      - name: Git Config
        uses: tmknom/git-config-action@970621c4819d5a601bbac4a2bcf6f5f80d92a2e6 # v0.2.0

      - name: Bump version
        env:
          BUMP_LEVEL: ${{ inputs.level }}
        run: |
          set -x
          git fetch --tag
          current="$(git tag --sort=-v:refname | head -1)"
          if [[ "${current}" == "" ]]; then
            current="v0.0.0"
          fi

          IFS='.' read -ra versions <<<"${current#v}"
          major="${versions[0]}"
          minor="${versions[1]}"
          patch="${versions[2]}"

          case "${BUMP_LEVEL}" in
            major)
              major="$((major + 1))"
              minor=0
              patch=0
              ;;
            minor)
              minor="$((minor + 1))"
              patch=0
              ;;
            patch)
              patch="$((patch + 1))"
              ;;
            *)
              printf "invalid argument: %s" "${BUMP_LEVEL}" >&2
              exit 1
              ;;
          esac

          echo "VERSION=v${major}.${minor}.${patch}" >> "${GITHUB_ENV}"

      - name: Push version tag
        run: |
          set -x
          major="${VERSION%%.*}"
          git tag --force --message "${VERSION}" "${VERSION}"
          git tag --force --message "${VERSION}" "${major}"
          git push --force origin "${VERSION}"
          git push --force origin "${major}"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: ~> v2
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run test
        run: dist/test-goreleaser_linux_amd64_v1/test-goreleaser --help
